/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    // Provides support for building a Java library. 
    // (de) Also ein jar wird erstellt
    id 'java-library'
}

// --warning-mode=all // (all,fail,none,summary), summary ist default - diese prop in ~/.gradle/gradle.properties

compileJava.options.encoding = 'UTF-8' // sonst wird Cp1252 genutzt
sourceSets.main.java.srcDirs += ['e-doc-commons/src/main/java']

repositories {
    // declare any Maven/Ivy/file repository here:
    /*
    	https://mvnrepository.com/repos/central
     */
	mavenCentral()
	
    /* Use JCenter for resolving dependencies: https://bintray.com/
    
		Bintray's JCenter is an up-to-date collection of all popular Maven OSS artifacts, 
		including artifacts published directly to Bintray.
    
     */
    jcenter()
}

/*
 Abhängigkeiten in Gradle folgen dem gleichen Format wie Maven. Abhängigkeiten sind wie folgt aufgebaut:

group:name:version

compile 'org.springframework:spring-core:4.3.1.RELEASE'

Eine alternative Syntax hierfür benennt jede Komponente der Abhängigkeit explizit wie folgt:

compile group: 'org.springframework', name: 'spring-core', version: '4.3.1.RELEASE'

 Manchmal haben Sie eine lokale JAR-Datei, die Sie Ihrem Gradle-Build als Abhängigkeit hinzufügen müssen. So können Sie das machen:

dependencies {
    compile files('path/local_dependency.jar') // deprecated syntax!
}

 */
dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
	testImplementation('org.hamcrest:hamcrest:2.2')
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
	// used in marshaller:
	api('org.glassfish.jaxb:jaxb-runtime:2.3.3')
	// used in jaxb-runtime:
	api('com.sun.istack:istack-commons-runtime:3.0.11')
	// wg. Singleton:
	api('javax.inject:javax.inject:1')

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//    implementation 'com.google.guava:guava:29.0-jre'
}

/* 
test {
    useJUnitPlatform()
}
*/
